// vite.config.ts
import { defineConfig } from "file:///home/project/node_modules/vite/dist/node/index.js";
import react from "file:///home/project/node_modules/@vitejs/plugin-react-swc/index.mjs";
import * as path from "path";
var __vite_injected_original_dirname = "/home/project";
var vite_config_default = defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080
  },
  plugins: [
    react()
    // إزالة componentTagger مؤقتاً لضمان الاستقرار
    // يمكن إضافته لاحقاً بعد اختبار دعم pdfmake
  ],
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src")
    }
  },
  optimizeDeps: {
    include: [
      "pdfmake/build/pdfmake",
      "pdfmake/build/vfs_fonts",
      "buffer",
      // ضروري لـ pdfmake
      "stream",
      // ضروري لـ pdfmake
      "util",
      // ضروري لـ pdfmake
      "zlib"
      // ضروري لـ pdfmake
    ],
    esbuildOptions: {
      // دعم المكتبات التي تستخدم global و process
      define: {
        global: "globalThis",
        "process.env": JSON.stringify({})
      },
      plugins: [
        // حل مشكلة buffer لمكتبات Node.js
        {
          name: "fix-node-globals-polyfill",
          setup(build) {
            build.onResolve({ filter: /_virtual-process-polyfill_\.js/ }, ({ path: path2 }) => ({ path: path2 }));
          }
        }
      ]
    }
  },
  build: {
    commonjsOptions: {
      include: [/pdfmake/, /node_modules/],
      transformMixedEsModules: true
      // مهم للتوافق
    },
    rollupOptions: {
      output: {
        manualChunks: (id) => {
          if (id.includes("pdfmake") || id.includes("react-pdf")) {
            return "pdf-libs";
          }
          if (id.includes("node_modules")) {
            return "vendor";
          }
        }
      }
    }
  },
  define: {
    // حل مشكلة global في المتصفح
    global: "window",
    "process.env": process.env
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvaG9tZS9wcm9qZWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9wcm9qZWN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL3Byb2plY3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBtb2RlIH0pID0+ICh7XG4gIHNlcnZlcjoge1xuICAgIGhvc3Q6IFwiOjpcIixcbiAgICBwb3J0OiA4MDgwLFxuICB9LFxuICBwbHVnaW5zOiBbXG4gICAgcmVhY3QoKSxcbiAgICAvLyBcdTA2MjVcdTA2MzJcdTA2MjdcdTA2NDRcdTA2MjkgY29tcG9uZW50VGFnZ2VyIFx1MDY0NVx1MDYyNFx1MDY0Mlx1MDYyQVx1MDYyN1x1MDY0QiBcdTA2NDRcdTA2MzZcdTA2NDVcdTA2MjdcdTA2NDYgXHUwNjI3XHUwNjQ0XHUwNjI3XHUwNjMzXHUwNjJBXHUwNjQyXHUwNjMxXHUwNjI3XHUwNjMxXG4gICAgLy8gXHUwNjRBXHUwNjQ1XHUwNjQzXHUwNjQ2IFx1MDYyNVx1MDYzNlx1MDYyN1x1MDY0MVx1MDYyQVx1MDY0NyBcdTA2NDRcdTA2MjdcdTA2MkRcdTA2NDJcdTA2MjdcdTA2NEIgXHUwNjI4XHUwNjM5XHUwNjJGIFx1MDYyN1x1MDYyRVx1MDYyQVx1MDYyOFx1MDYyN1x1MDYzMSBcdTA2MkZcdTA2MzlcdTA2NDUgcGRmbWFrZVxuICBdLFxuICByZXNvbHZlOiB7XG4gICAgYWxpYXM6IHtcbiAgICAgIFwiQFwiOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4vc3JjXCIpLFxuICAgIH0sXG4gIH0sXG4gIG9wdGltaXplRGVwczoge1xuICAgIGluY2x1ZGU6IFtcbiAgICAgICdwZGZtYWtlL2J1aWxkL3BkZm1ha2UnLFxuICAgICAgJ3BkZm1ha2UvYnVpbGQvdmZzX2ZvbnRzJyxcbiAgICAgICdidWZmZXInLCAvLyBcdTA2MzZcdTA2MzFcdTA2NDhcdTA2MzFcdTA2NEEgXHUwNjQ0XHUwNjQwIHBkZm1ha2VcbiAgICAgICdzdHJlYW0nLCAvLyBcdTA2MzZcdTA2MzFcdTA2NDhcdTA2MzFcdTA2NEEgXHUwNjQ0XHUwNjQwIHBkZm1ha2VcbiAgICAgICd1dGlsJywgLy8gXHUwNjM2XHUwNjMxXHUwNjQ4XHUwNjMxXHUwNjRBIFx1MDY0NFx1MDY0MCBwZGZtYWtlXG4gICAgICAnemxpYicgLy8gXHUwNjM2XHUwNjMxXHUwNjQ4XHUwNjMxXHUwNjRBIFx1MDY0NFx1MDY0MCBwZGZtYWtlXG4gICAgXSxcbiAgICBlc2J1aWxkT3B0aW9uczoge1xuICAgICAgLy8gXHUwNjJGXHUwNjM5XHUwNjQ1IFx1MDYyN1x1MDY0NFx1MDY0NVx1MDY0M1x1MDYyQVx1MDYyOFx1MDYyN1x1MDYyQSBcdTA2MjdcdTA2NDRcdTA2MkFcdTA2NEEgXHUwNjJBXHUwNjMzXHUwNjJBXHUwNjJFXHUwNjJGXHUwNjQ1IGdsb2JhbCBcdTA2NDggcHJvY2Vzc1xuICAgICAgZGVmaW5lOiB7XG4gICAgICAgIGdsb2JhbDogJ2dsb2JhbFRoaXMnLFxuICAgICAgICAncHJvY2Vzcy5lbnYnOiBKU09OLnN0cmluZ2lmeSh7fSlcbiAgICAgIH0sXG4gICAgICBwbHVnaW5zOiBbXG4gICAgICAgIC8vIFx1MDYyRFx1MDY0NCBcdTA2NDVcdTA2MzRcdTA2NDNcdTA2NDRcdTA2MjkgYnVmZmVyIFx1MDY0NFx1MDY0NVx1MDY0M1x1MDYyQVx1MDYyOFx1MDYyN1x1MDYyQSBOb2RlLmpzXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnZml4LW5vZGUtZ2xvYmFscy1wb2x5ZmlsbCcsXG4gICAgICAgICAgc2V0dXAoYnVpbGQpIHtcbiAgICAgICAgICAgIGJ1aWxkLm9uUmVzb2x2ZSh7IGZpbHRlcjogL192aXJ0dWFsLXByb2Nlc3MtcG9seWZpbGxfXFwuanMvIH0sICh7IHBhdGggfSkgPT4gKHsgcGF0aCB9KSlcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICBidWlsZDoge1xuICAgIGNvbW1vbmpzT3B0aW9uczoge1xuICAgICAgaW5jbHVkZTogWy9wZGZtYWtlLywgL25vZGVfbW9kdWxlcy9dLFxuICAgICAgdHJhbnNmb3JtTWl4ZWRFc01vZHVsZXM6IHRydWUsIC8vIFx1MDY0NVx1MDY0N1x1MDY0NSBcdTA2NDRcdTA2NDRcdTA2MkFcdTA2NDhcdTA2MjdcdTA2NDFcdTA2NDJcbiAgICB9LFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBtYW51YWxDaHVua3M6IChpZCkgPT4ge1xuICAgICAgICAgIC8vIFx1MDYyQVx1MDYyQ1x1MDY0NVx1MDY0QVx1MDYzOSBcdTA2MkNcdTA2NDVcdTA2NEFcdTA2MzkgXHUwNjQ1XHUwNjQzXHUwNjJBXHUwNjI4XHUwNjI3XHUwNjJBIFBERiBcdTA2NDFcdTA2NEEgY2h1bmsgXHUwNjQ4XHUwNjI3XHUwNjJEXHUwNjJGXG4gICAgICAgICAgaWYgKGlkLmluY2x1ZGVzKCdwZGZtYWtlJykgfHwgaWQuaW5jbHVkZXMoJ3JlYWN0LXBkZicpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BkZi1saWJzJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlkLmluY2x1ZGVzKCdub2RlX21vZHVsZXMnKSkge1xuICAgICAgICAgICAgcmV0dXJuICd2ZW5kb3InO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGVmaW5lOiB7XG4gICAgLy8gXHUwNjJEXHUwNjQ0IFx1MDY0NVx1MDYzNFx1MDY0M1x1MDY0NFx1MDYyOSBnbG9iYWwgXHUwNjQxXHUwNjRBIFx1MDYyN1x1MDY0NFx1MDY0NVx1MDYyQVx1MDYzNVx1MDY0MVx1MDYyRFxuICAgIGdsb2JhbDogJ3dpbmRvdycsXG4gICAgJ3Byb2Nlc3MuZW52JzogcHJvY2Vzcy5lbnYsXG4gIH1cbn0pKTtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBeU4sU0FBUyxvQkFBb0I7QUFDdFAsT0FBTyxXQUFXO0FBQ2xCLFlBQVksVUFBVTtBQUZ0QixJQUFNLG1DQUFtQztBQUt6QyxJQUFPLHNCQUFRLGFBQWEsQ0FBQyxFQUFFLEtBQUssT0FBTztBQUFBLEVBQ3pDLFFBQVE7QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxFQUNSO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxNQUFNO0FBQUE7QUFBQTtBQUFBLEVBR1I7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLE9BQU87QUFBQSxNQUNMLEtBQVUsYUFBUSxrQ0FBVyxPQUFPO0FBQUEsSUFDdEM7QUFBQSxFQUNGO0FBQUEsRUFDQSxjQUFjO0FBQUEsSUFDWixTQUFTO0FBQUEsTUFDUDtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFBQSxNQUNBO0FBQUE7QUFBQSxNQUNBO0FBQUE7QUFBQSxNQUNBO0FBQUE7QUFBQSxJQUNGO0FBQUEsSUFDQSxnQkFBZ0I7QUFBQTtBQUFBLE1BRWQsUUFBUTtBQUFBLFFBQ04sUUFBUTtBQUFBLFFBQ1IsZUFBZSxLQUFLLFVBQVUsQ0FBQyxDQUFDO0FBQUEsTUFDbEM7QUFBQSxNQUNBLFNBQVM7QUFBQTtBQUFBLFFBRVA7QUFBQSxVQUNFLE1BQU07QUFBQSxVQUNOLE1BQU0sT0FBTztBQUNYLGtCQUFNLFVBQVUsRUFBRSxRQUFRLGlDQUFpQyxHQUFHLENBQUMsRUFBRSxNQUFBQSxNQUFLLE9BQU8sRUFBRSxNQUFBQSxNQUFLLEVBQUU7QUFBQSxVQUN4RjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLGlCQUFpQjtBQUFBLE1BQ2YsU0FBUyxDQUFDLFdBQVcsY0FBYztBQUFBLE1BQ25DLHlCQUF5QjtBQUFBO0FBQUEsSUFDM0I7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLFFBQVE7QUFBQSxRQUNOLGNBQWMsQ0FBQyxPQUFPO0FBRXBCLGNBQUksR0FBRyxTQUFTLFNBQVMsS0FBSyxHQUFHLFNBQVMsV0FBVyxHQUFHO0FBQ3RELG1CQUFPO0FBQUEsVUFDVDtBQUNBLGNBQUksR0FBRyxTQUFTLGNBQWMsR0FBRztBQUMvQixtQkFBTztBQUFBLFVBQ1Q7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFDQSxRQUFRO0FBQUE7QUFBQSxJQUVOLFFBQVE7QUFBQSxJQUNSLGVBQWUsUUFBUTtBQUFBLEVBQ3pCO0FBQ0YsRUFBRTsiLAogICJuYW1lcyI6IFsicGF0aCJdCn0K
